apply plugin: 'com.android.application'
apply plugin: 'com.jaredsburrows.license'
apply from: 'checkstyle.gradle'
apply from: 'cpd.gradle'
apply from: 'jacoco.gradle'
apply from: 'utils.gradle'
apply plugin: 'org.jetbrains.kotlin.android'

apply plugin: 'appsuit'

buildscript {
    repositories {
        flatDir dirs:'../appsuit'
    }
    dependencies {
        classpath'com.stealien.appsuit.gradle:AppSuit-AndroidStudio-24.0.2'
//        classpath'com.stealien.appsuit.gradle:AppSuit-AndroidStudio(23.1.3)'

    }
}

appsuit{
    serverOptions {
        host = 'http://172.16.20.100:10618/api/v1'
        id 'jbwoo'
        pw 'Whdqja0131!'
        options = ['check_root']

//        use_native true
//        enabled true
        cloudBuild true
        enableServerBuild true
        processLibrary false
    }
    rulePath '../appsuit/rule.txt'
    dumpPath '../appsuit/dump.txt'
    buildTypes {
        release {
            enabled true
        }
        debug {
            enabled false
        }
    }

}

android {
    compileSdkVersion 34
    buildToolsVersion '31.0.0'
    defaultConfig {
        applicationId 'com.smlnskgmail.jaman.hashchecker'
        minSdkVersion 28
        targetSdkVersion 34
        versionCode 95
        versionName '3.6.9'
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner 'com.smlnskgmail.jaman.hashchecker.runner.AndroidJacocoTestRunner'

        resConfigs 'en',
                'de',
                'el',
                'es',
                'fa',
                'fr',
                'hu',
                'it',
                'iw',
                'ko',
                'nl',
                'pl',
                'ro',
                'ru',
                'sv',
                'zh-rCN',
                'vi',
                'ja'
    }
    signingConfigs {
        release {
            final KEYSTORE_PATH = 'RELEASE_KEYSTORE_PATH'
            final KEYSTORE_PASSWORD = 'RELEASE_KEYSTORE_PASSWORD'
            final KEY_ALIAS = 'RELEASE_KEY_ALIAS'
            final KEY_PASSWORD = 'RELEASE_KEY_PASSWORD'
            def keystoreProperties = new Properties()
            def keystorePropertiesFile = rootProject.file("local.properties")
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            }
            def hasSignConfigInProperties = propertiesHasSignConfig(
                    keystoreProperties,
                    KEYSTORE_PATH,
                    KEYSTORE_PASSWORD,
                    KEY_ALIAS,
                    KEY_PASSWORD
            )
            if (!hasSignConfigInProperties) {
                hasSignConfigInProperties = envHasSignConfig(
                        KEYSTORE_PATH,
                        KEYSTORE_PASSWORD,
                        KEY_ALIAS,
                        KEY_PASSWORD
                )
                if (hasSignConfigInProperties) {
                    keystoreProperties.put(KEYSTORE_PATH, System.getenv(KEYSTORE_PATH))
                    keystoreProperties.put(KEYSTORE_PASSWORD, System.getenv(KEYSTORE_PASSWORD))
                    keystoreProperties.put(KEY_ALIAS, System.getenv(KEY_ALIAS))
                    keystoreProperties.put(KEY_PASSWORD, System.getenv(KEY_PASSWORD))
                }
            }
            if (hasSignConfigInProperties) {
                try {
                    storeFile file(keystoreProperties[KEYSTORE_PATH])
                    storePassword keystoreProperties[KEYSTORE_PASSWORD]
                    keyAlias keystoreProperties[KEY_ALIAS]
                    keyPassword keystoreProperties[KEY_PASSWORD]
                } catch (ignore) {
                    throw new InvalidUserDataException("You should define sign keys in gradle.properties or int ENV.")
                }
            } else if (System.getenv('CI')) {
                throw new InvalidUserDataException("You should define sign keys in gradle.properties or in ENV.")
            }
        }
    }
    buildTypes {
        debug {
            versionNameSuffix '-dev'
            minifyEnabled false

            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "distribute-version"
    productFlavors {
        thirdPartyStores {
            dimension "distribute-version"
            applicationIdSuffix ".thirdparty"
            versionNameSuffix "-thirdparty"
        }
        googlePlay {
            dimension "distribute-version"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    sourceSets {
        main {
            resources.srcDirs = [
                    'src/main/resources',
                    'src/test'
            ]
        }
    }
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def buildType = variant.buildType.name
            output.outputFileName = "hash-checker_${buildType}.apk"
        }
    }
}

static boolean propertiesHasSignConfig(
        properties,
        path,
        password,
        keyAlias,
        keyPassword
) {
    def has = { key -> properties.containsKey(key) }
    return has(path) && has(password) && has(keyAlias) && has(keyPassword)
}

static boolean envHasSignConfig(
        path,
        password,
        keyAlias,
        keyPassword
) {
    def has = { key -> System.getenv().containsKey(key) }
    return has(path) && has(password) && has(keyAlias) && has(keyPassword)
}

dependencies {
    implementation fileTree(dir : 'libs', include : ['*.aar'])
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.preference:preference:1.1.1'

    // SHA-3
    implementation 'com.github.aelstad:keccakj:1.1.0'

    // AdaptiveRecyclerView
    implementation 'com.github.fartem:adaptive-recycler-view:1.1.1'

    // Dagger
    implementation 'com.google.dagger:dagger:2.43.2'
    implementation 'com.google.dagger:dagger-android-support:2.43.2'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.43.2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.43.2'
    androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:2.43.2'

    // ORMLite
    implementation 'com.j256.ormlite:ormlite-core:5.7'
    implementation 'com.j256.ormlite:ormlite-android:5.7'

    // Checkstyle
    checkstyle 'com.github.fartem:checkstyle-checks-java:1.1.0'
    checkstyle 'com.github.fartem:checkstyle-checks-android:1.2.3'

    // Unit tests
    testImplementation 'junit:junit:4.13.2'

    // Android tests
    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'

    // Screenshots
//    androidTestImplementation 'tools.fastlane:screengrab:2.1.1'

    // Google Play Core Library
    googlePlayImplementation 'com.google.android.play:core:1.10.2'
}
